{
  "hash": "3b069697367fedc9236d1c380ca0adf8",
  "result": {
    "markdown": "---\ntitle: \"ML Ops with Penguin\"\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(tidyverse)\nlibrary(tidymodels)\n\ntidymodels_prefer()\n```\n:::\n\n\nThanks [james-h-wade](https://www.youtube.com/@james-h-wade) for simplify the whole process. The original material can be found at:\n\n- [YouTube: Hyperparameter Tuning](https://youtu.be/IzjmuGJgwKQ?si=9VA-Etz0p0bonR1D)\n- [Slide](https://jameshwade.quarto.pub/hyperparameters-tuning-with-tidymodels)\n- [GitHub: R-ML Ops](https://github.com/JamesHWade/r-mlops)\n\n## EDA\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  filter(!is.na(sex)) |>\n  ggplot(aes(x     = flipper_length_mm,\n             y     = bill_length_mm,\n             color = sex,\n             size  = body_mass_g)) +\n  geom_point(alpha = 0.5) +\n  facet_wrap(~species)\n```\n\n::: {.cell-output-display}\n![](ml-ops_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n## Split\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove rows with missing sex, exclude year and island\npenguins_df <-\n  palmerpenguins::penguins |>\n  drop_na(sex) |>\n  select(-year, -island)\n\n# set the seed for reproducibility\nset.seed(1234)\n\n# Split the data into train and test sets stratified by sex\npenguin_split <- initial_split(penguins_df, strata = sex)\npenguin_train <- training(penguin_split)\npenguin_test  <- testing(penguin_split)\n\n# create folds for cross validation\npenguin_folds <- vfold_cv(penguin_train)\n```\n:::\n\n\n## Recipes\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_rec <-\n  recipe(sex ~ ., data = penguin_train) |>     \n  step_YeoJohnson(all_numeric_predictors()) |> \n  step_dummy(species) |>                       \n  step_normalize(all_numeric_predictors())     \n```\n:::\n\n\n## Model Spec\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Logistic Regression\nglm_spec <-\n  logistic_reg(penalty = 1) |>\n  set_engine(\"glm\")\n\n# Random Forest\ntree_spec <-\n  rand_forest(min_n = tune()) |>\n  set_engine(\"ranger\") |>\n  set_mode(\"classification\")\n\n# Neural Network with `{torch}` (Not Done)\n```\n:::\n\n\n## Fit Models & Tune Hyperparameters\n\n\nUse Bayes optimizaiton for hyperparameter tuning\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbayes_control <- control_bayes(no_improve = 10L,\n                               time_limit = 20,\n                               save_pred  = TRUE,\n                               verbose    = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Unix and macOS only\nlibrary(doMC)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: foreach\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'foreach'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:purrr':\n\n    accumulate, when\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: iterators\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: parallel\n```\n:::\n\n```{.r .cell-code}\nregisterDoMC(cores = 8)\n```\n:::\n\n::: {.cell hash='ml-ops_cache/html/unnamed-chunk-7_7cffe79897db435f396e557c657c4fee'}\n\n```{.r .cell-code}\nworkflow_set <-\n  workflow_set(\n    preproc = list(penguin_rec),\n    models  = list(glm   = glm_spec,\n                   tree  = tree_spec)\n  ) |>\n  workflow_map(\"tune_bayes\",\n               iter      = 50L,\n               resamples = penguin_folds,\n               control   = bayes_control\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n❯  Generating a set of 5 initial parameter results\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Initialization complete\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Generating 34 candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Predicted candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Generating 33 candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Predicted candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Generating 32 candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Predicted candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Generating 31 candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Predicted candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Generating 30 candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Predicted candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Generating 29 candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Predicted candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Generating 28 candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Predicted candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Generating 27 candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Predicted candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Generating 26 candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Predicted candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Generating 25 candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Predicted candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Generating 24 candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Predicted candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Gaussian process model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Generating 23 candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Predicted candidates\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✓ Estimating performance\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! No improvement for 10 iterations; returning current results.\n```\n:::\n\n```{.r .cell-code}\nclass(workflow_set)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"workflow_set\" \"tbl_df\"       \"tbl\"          \"data.frame\"  \n```\n:::\n\n```{.r .cell-code}\nworkflow_set\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A workflow set/tibble: 2 × 4\n  wflow_id    info             option    result   \n  <chr>       <list>           <list>    <list>   \n1 recipe_glm  <tibble [1 × 4]> <opts[3]> <rsmp[+]>\n2 recipe_tree <tibble [1 × 4]> <opts[3]> <tune[+]>\n```\n:::\n:::\n\n\n## Compare Model Results\n\n### Tabular view\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create table of best models defined using roc_auc metric\nrank_results(workflow_set,\n             rank_metric = \"roc_auc\",\n             select_best = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 9\n  wflow_id    .config       .metric  mean std_err     n preprocessor model  rank\n  <chr>       <chr>         <chr>   <dbl>   <dbl> <int> <chr>        <chr> <int>\n1 recipe_glm  Preprocessor… accura… 0.900  0.0199    10 recipe       logi…     1\n2 recipe_glm  Preprocessor… roc_auc 0.969  0.0123    10 recipe       logi…     1\n3 recipe_tree Iter2         accura… 0.912  0.0251    10 recipe       rand…     2\n4 recipe_tree Iter2         roc_auc 0.967  0.0132    10 recipe       rand…     2\n```\n:::\n:::\n\n### Plotting performance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(workflow_set)\n```\n\n::: {.cell-output-display}\n![](ml-ops_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n## Finalize\n\n### Select best model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_model_id <- \"recipe_glm\"\n\nbest_fit <-\n  workflow_set |>\n  extract_workflow_set_result(best_model_id) |>\n  select_best(metric = \"accuracy\")\n\nbest_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  .config             \n  <chr>               \n1 Preprocessor1_Model1\n```\n:::\n:::\n\n\n### Final Fit\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create workflow for best model\nfinal_workflow <-\n  workflow_set |>\n  extract_workflow(best_model_id) |>\n  finalize_workflow(best_fit)\n\n# fit final model with all data\nfinal_fit <-\n  final_workflow |>\n  last_fit(penguin_split)\n```\n:::\n\n\n\n### Final Metric\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# show model performance\ncollect_metrics(final_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy binary         0.905 Preprocessor1_Model1\n2 roc_auc  binary         0.971 Preprocessor1_Model1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_predictions(final_fit) |>\n  roc_curve(sex, .pred_female) |> \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](ml-ops_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}