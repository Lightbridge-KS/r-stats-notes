{
  "hash": "8ca40802745b44811f75abe02342964f",
  "result": {
    "markdown": "---\ntitle: \"Tune Models\"\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(AmesHousing)\n\ntidymodels_prefer()\n```\n:::\n\n\n- [Example Analysis of Ames Housing Data](https://tune.tidymodels.org/reference/example_ames_knn.html)\n\n## Split\n\n\n::: {.cell}\n\n```{.r .cell-code}\names <- make_ames()\n\nset.seed(4595)\ndata_split <- initial_split(ames, strata = \"Sale_Price\")\n\names_train <- training(data_split)\n\nset.seed(2453)\nrs_splits <- vfold_cv(ames_train, strata = \"Sale_Price\")\n```\n:::\n\n\n## Recipes\n\n\n::: {.cell}\n\n```{.r .cell-code}\names_rec <-\n  recipe(Sale_Price ~ ., data = ames_train) %>%\n  step_log(Sale_Price, base = 10) %>%\n  step_YeoJohnson(Lot_Area, Gr_Liv_Area) %>%\n  step_other(Neighborhood, threshold = .1)  %>%\n  step_dummy(all_nominal()) %>%\n  step_zv(all_predictors()) %>%\n  step_ns(Longitude, deg_free = tune(\"lon\")) %>%\n  step_ns(Latitude, deg_free = tune(\"lat\"))\n```\n:::\n\n\n\n## Models\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn_model <-\n  nearest_neighbor(\n    mode = \"regression\",\n    neighbors = tune(\"K\"),\n    weight_func = tune(),\n    dist_power = tune()\n  ) %>%\n  set_engine(\"kknn\")\n```\n:::\n\n\n\n## Workflow & Parameters\n\n\n::: {.cell}\n\n```{.r .cell-code}\names_wflow <-\n  workflow() %>%\n  add_recipe(ames_rec) %>%\n  add_model(knn_model)\n\nclass(ames_wflow)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"workflow\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\names_set <-\n  extract_parameter_set_dials(ames_wflow) %>%\n  update(K = neighbors(c(1, 50)))\n\nclass(ames_set)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"parameters\" \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\names_set\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCollection of 5 parameters for tuning\n\n  identifier        type    object\n           K   neighbors nparam[+]\n weight_func weight_func dparam[+]\n  dist_power  dist_power nparam[+]\n         lon    deg_free nparam[+]\n         lat    deg_free nparam[+]\n```\n:::\n:::\n\n\n## Grid\n\n### Parameter Grids\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(7014)\n\n### Space-filling parameter grids\names_grid <-\n  ames_set %>%\n  grid_max_entropy(size = 10)\n\names_grid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 5\n       K weight_func  dist_power   lon   lat\n   <int> <chr>             <dbl> <int> <int>\n 1    35 optimal           1.32      8     1\n 2    35 rank              1.29      3    13\n 3    21 cos               0.626     1     4\n 4     4 biweight          0.311     8     4\n 5    32 triangular        0.165     9    15\n 6     3 rank              1.86     10    15\n 7    40 triangular        0.167    11     7\n 8    12 epanechnikov      1.53      4     7\n 9     5 rank              0.411     2     7\n10    33 triweight         0.511    10     3\n```\n:::\n:::\n\n\n### Grid Search !\n\n```r\n### Perform Grid Search (Not Run)\n\names_grid_search <-\n  tune_grid(\n    ames_wflow,\n    resamples = rs_splits,\n    grid = ames_grid\n  )\n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"example_ames_knn\")\nclass(ames_grid_search)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tune_results\" \"tbl_df\"       \"tbl\"          \"data.frame\"  \n```\n:::\n\n```{.r .cell-code}\names_grid_search\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Tuning results\n# 10-fold cross-validation using stratification \n# A tibble: 10 × 4\n   splits           id     .metrics          .notes          \n   <list>           <chr>  <list>            <list>          \n 1 <split [1978/0]> Fold01 <tibble [20 × 9]> <tibble [0 × 1]>\n 2 <split [1979/0]> Fold02 <tibble [20 × 9]> <tibble [0 × 1]>\n 3 <split [1979/0]> Fold03 <tibble [20 × 9]> <tibble [0 × 1]>\n 4 <split [1979/0]> Fold04 <tibble [20 × 9]> <tibble [0 × 1]>\n 5 <split [1979/0]> Fold05 <tibble [20 × 9]> <tibble [0 × 1]>\n 6 <split [1979/0]> Fold06 <tibble [20 × 9]> <tibble [0 × 1]>\n 7 <split [1979/0]> Fold07 <tibble [20 × 9]> <tibble [0 × 1]>\n 8 <split [1979/0]> Fold08 <tibble [20 × 9]> <tibble [0 × 1]>\n 9 <split [1979/0]> Fold09 <tibble [20 × 9]> <tibble [0 × 1]>\n10 <split [1981/0]> Fold10 <tibble [20 × 9]> <tibble [0 × 1]>\n```\n:::\n:::\n\n\n## Finalized\n\n\n### Select Best Tune Result\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlowest_rmse <- select_best(ames_grid_search, metric = \"rmse\")\nclass(lowest_rmse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nlowest_rmse\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 6\n      K weight_func dist_power   lon   lat .config              \n  <int> <chr>            <dbl> <int> <int> <chr>                \n1    33 triweight        0.511    10     3 Preprocessor10_Model1\n```\n:::\n:::\n\n### Last Fit\n\n\n::: {.cell hash='tune-mod_cache/html/unnamed-chunk-9_43dd0663b2a5fa5a27c6b3216a48cf72'}\n\n```{.r .cell-code}\names_res_last <- workflow(ames_rec, knn_model) |> \n  finalize_workflow(lowest_rmse) |> \n  last_fit(split = data_split, metrics = metric_set(rmse))\n\n\nclass(ames_res_last)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"last_fit\"         \"resample_results\" \"tune_results\"     \"tbl_df\"          \n[5] \"tbl\"              \"data.frame\"      \n```\n:::\n\n```{.r .cell-code}\names_res_last\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Resampling results\n# Manual resampling \n# A tibble: 1 × 6\n  splits             id               .metrics .notes   .predictions .workflow \n  <list>             <chr>            <list>   <list>   <list>       <list>    \n1 <split [2197/733]> train/test split <tibble> <tibble> <tibble>     <workflow>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}