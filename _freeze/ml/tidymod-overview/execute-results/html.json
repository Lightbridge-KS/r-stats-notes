{
  "hash": "5098a073e76448601fc33f7abfdc8b32",
  "result": {
    "markdown": "---\ntitle: \"Tidymodels Overview\"\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(tidyverse)\nlibrary(tidymodels)\n\ntidymodels_prefer()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npen <- penguins |> \n  select(!c(island, bill_length_mm))\n```\n:::\n\n\n\n## Explore Data\n\nOutcome: `species`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(pen)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 5\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npen |>\n  filter(!is.na(sex)) |>\n  ggplot(aes(x     = flipper_length_mm,\n             y     = bill_depth_mm,\n             color = species,\n             size  = body_mass_g)) +\n  geom_point(alpha = 0.5) +\n  facet_wrap(~sex)\n```\n\n::: {.cell-output-display}\n![](tidymod-overview_files/figure-html/fig-plot-pen-1.png){#fig-plot-pen width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npen |> \n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n:::\n:::\n\n\nComplete record rate:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvapply(pen, function(x) mean(!is.na(x)), numeric(1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          species     bill_depth_mm flipper_length_mm       body_mass_g \n        1.0000000         0.9941860         0.9941860         0.9941860 \n              sex \n        0.9680233 \n```\n:::\n:::\n\n\n\n## Data Budget\n\n### Split Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\npen_split <- initial_split(pen, prop = 0.8, strata = species)\npen_split\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Training/Testing/Total>\n<274/70/344>\n```\n:::\n\n```{.r .cell-code}\npen_train <- training(pen_split)\npen_test <- testing(pen_split)\n```\n:::\n\n\n### Resample\n\n10-folded CV, repeated 2 times from the training data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\npen_folds <- vfold_cv(pen_train, v = 10)\n\nhead(pen_folds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  splits           id    \n  <list>           <chr> \n1 <split [246/28]> Fold01\n2 <split [246/28]> Fold02\n3 <split [246/28]> Fold03\n4 <split [246/28]> Fold04\n5 <split [247/27]> Fold05\n6 <split [247/27]> Fold06\n```\n:::\n:::\n\n\n## Recipes\n\n\n::: {.cell}\n\n```{.r .cell-code}\npen_rec_base <- recipe(species ~ ., data = pen_train) \npen_rec_base\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Recipe ──────────────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Inputs \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nNumber of variables by role\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\noutcome:   1\npredictor: 4\n```\n:::\n:::\n\n\n## Model Spec\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmspec_cls <- list(\n  multi_nnet = multinom_reg(engine = \"nnet\"),\n  multi_glmnet_lasso = multinom_reg(engine = \"glmnet\", \n                                    penalty = 0.1, mixture = 1)\n)\n\nmap(mspec_cls, translate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$multi_nnet\nMultinomial Regression Model Specification (classification)\n\nComputational engine: nnet \n\nModel fit template:\nnnet::multinom(formula = missing_arg(), data = missing_arg(), \n    trace = FALSE)\n\n$multi_glmnet_lasso\nMultinomial Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = 0.1\n  mixture = 1\n\nComputational engine: glmnet \n\nModel fit template:\nglmnet::glmnet(x = missing_arg(), y = missing_arg(), weights = missing_arg(), \n    alpha = 1, family = \"multinomial\")\n```\n:::\n:::\n\n## Workflow\n\n### Single\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworkflow(preprocessor = pen_rec_base, spec = mspec_cls$multi_nnet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: multinom_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nMultinomial Regression Model Specification (classification)\n\nComputational engine: nnet \n```\n:::\n:::\n\n\n### Combinations\n\n\n::: {.cell}\n\n```{.r .cell-code}\npen_wfset <- workflow_set(\n  preproc = list(base = pen_rec_base),\n  models = mspec_cls\n)\n\npen_wfset\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A workflow set/tibble: 2 × 4\n  wflow_id                info             option    result    \n  <chr>                   <list>           <list>    <list>    \n1 base_multi_nnet         <tibble [1 × 4]> <opts[0]> <list [0]>\n2 base_multi_glmnet_lasso <tibble [1 × 4]> <opts[0]> <list [0]>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npen_wf_base <- extract_workflow(pen_wfset, id = \"base_multi_nnet\")\npen_wf_base\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: multinom_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nMultinomial Regression Model Specification (classification)\n\nComputational engine: nnet \n```\n:::\n:::\n\n\n## Other Spec\n\n### Performance Matric Spec\n\nA function factory\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmet_set_class <- metric_set(\n  accuracy, sensitivity, specificity,\n  mcc # Matthews correlation coefficient\n)\n\nmet_set_mix <- metric_set(roc_auc, accuracy, sensitivity, specificity)\n```\n:::\n\n\n### Resamples Control\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkeep_pred <- control_resamples(save_pred = TRUE, save_workflow = TRUE)\n```\n:::\n\n\n\n## Fit\n\n### Using: Test Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npen_fit_base <- fit(pen_wf_base, data = pen_test)\npen_fit_base\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: multinom_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nCall:\nnnet::multinom(formula = ..y ~ ., data = data, trace = FALSE)\n\nCoefficients:\n          (Intercept) bill_depth_mm flipper_length_mm  body_mass_g   sexmale\nChinstrap -21.7033319     -0.555911         0.1906063 -0.001596491 0.7168018\nGentoo     -0.4884471     -6.002835         0.2447407  0.011754103 3.8349607\n\nResidual Deviance: 46.77568 \nAIC: 66.77568 \n```\n:::\n:::\n\n### Using: Resamples\n\n\n::: {.cell hash='tidymod-overview_cache/html/pen_fit_fold_base_ab3b83d7c5ca8e739763482a2076782e'}\n\n```{.r .cell-code}\npen_fit_fold_base <- fit_resamples(pen_wf_base, \n                                   resamples = pen_folds,\n                                   metrics = met_set_mix,\n                                   control = keep_pred)\nhead(pen_fit_fold_base)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  splits           id     .metrics         .notes           .predictions     \n  <list>           <chr>  <list>           <list>           <list>           \n1 <split [246/28]> Fold01 <tibble [4 × 4]> <tibble [0 × 3]> <tibble [28 × 7]>\n2 <split [246/28]> Fold02 <tibble [4 × 4]> <tibble [0 × 3]> <tibble [28 × 7]>\n3 <split [246/28]> Fold03 <tibble [4 × 4]> <tibble [0 × 3]> <tibble [28 × 7]>\n4 <split [246/28]> Fold04 <tibble [4 × 4]> <tibble [0 × 3]> <tibble [28 × 7]>\n5 <split [247/27]> Fold05 <tibble [4 × 4]> <tibble [0 × 3]> <tibble [27 × 7]>\n6 <split [247/27]> Fold06 <tibble [4 × 4]> <tibble [0 × 3]> <tibble [27 × 7]>\n```\n:::\n:::\n\n\n## Evaluate & Predict\n\n### Using: Test set\n\n#### Predict\n\n\n::: {.cell}\n\n```{.r .cell-code}\npen_res_base <- broom::augment(pen_fit_base, new_data = pen_test)\nglimpse(pen_res_base)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 70\nColumns: 9\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, 17.1, 20.7, 18.4, 17.9, 17.8, 21.1…\n$ flipper_length_mm <int> 181, 186, 195, 186, 197, 184, 187, 188, 196, 179, 19…\n$ body_mass_g       <int> 3750, 3800, 3250, 3300, 4500, 3325, 3200, 3300, 4150…\n$ sex               <fct> male, female, female, NA, male, female, female, fema…\n$ .pred_class       <fct> Adelie, Adelie, Chinstrap, NA, Adelie, Adelie, Adeli…\n$ .pred_Adelie      <dbl> 0.9463005, 0.8797500, 0.4329285, NA, 0.8936564, 0.89…\n$ .pred_Chinstrap   <dbl> 0.05369946, 0.12024966, 0.56707149, NA, 0.10634361, …\n$ .pred_Gentoo      <dbl> 1.147426e-09, 3.454101e-07, 6.534172e-11, NA, 2.2390…\n```\n:::\n:::\n\n\n#### Metric\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmet_set_class(pen_res_base, \n              truth = species, \n              estimate = .pred_class,\n              estimator = \"macro\" # Macro AVG\n              )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  .metric     .estimator .estimate\n  <chr>       <chr>          <dbl>\n1 accuracy    multiclass     0.809\n2 sensitivity macro          0.727\n3 specificity macro          0.896\n4 mcc         multiclass     0.704\n```\n:::\n:::\n\n\n#### ROC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroc_curve(pen_res_base, truth = species, \n          .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) |> \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](tidymod-overview_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nGentoo curve is on the top-left see [@fig-plot-pen] for reason.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroc_auc(pen_res_base, truth = species, \n        .pred_Adelie, .pred_Chinstrap, .pred_Gentoo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc hand_till      0.933\n```\n:::\n:::\n\n\n### Using Resamples\n\n#### Metric\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(pen_fit_fold_base)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 6\n  .metric     .estimator  mean     n std_err .config             \n  <chr>       <chr>      <dbl> <int>   <dbl> <chr>               \n1 accuracy    multiclass 0.823    10  0.0227 Preprocessor1_Model1\n2 roc_auc     hand_till  0.918    10  0.0166 Preprocessor1_Model1\n3 sensitivity macro      0.753    10  0.0231 Preprocessor1_Model1\n4 specificity macro      0.904    10  0.0110 Preprocessor1_Model1\n```\n:::\n:::\n\nThese are the resampling estimates averaged over the individual replicates. To get the metrics for each resample, use the option `summarize = FALSE`.\n\n#### Predictions\n\n**Assessment set predictions:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npen_assess_base <- collect_predictions(pen_fit_fold_base, summarize = FALSE)\nhead(pen_assess_base)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  id     .pred_Adelie .pred_Chinstrap .pred_Gentoo  .row .pred_class species\n  <chr>         <dbl>           <dbl>        <dbl> <int> <fct>       <fct>  \n1 Fold01        0.792          0.208      4.02e-25    10 Adelie      Adelie \n2 Fold01        0.691          0.309      3.25e-18    17 Adelie      Adelie \n3 Fold01        0.982          0.0177     7.24e-12    19 Adelie      Adelie \n4 Fold01        0.979          0.0209     2.11e-22    22 Adelie      Adelie \n5 Fold01        0.846          0.154      4.46e-12    46 Adelie      Adelie \n6 Fold01        0.880          0.120      5.82e-14    51 Adelie      Adelie \n# ℹ 1 more variable: .config <chr>\n```\n:::\n:::\n\n\n\n`.row` column is an integer that matches the row of the original training set so that these results can be properly arranged and joined with the original data.\n\n**Averaged Predictions:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_predictions(pen_fit_fold_base, summarize = T) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n   .row species .config    .pred_Adelie .pred_Chinstrap .pred_Gentoo .pred_class\n  <int> <fct>   <chr>             <dbl>           <dbl>        <dbl> <fct>      \n1     1 Adelie  Preproces…      NaN            NaN        NaN        Adelie     \n2     2 Adelie  Preproces…        0.514          0.486      1.41e-17 Adelie     \n3     3 Adelie  Preproces…        0.874          0.126      8.77e-21 Adelie     \n4     4 Adelie  Preproces…        0.949          0.0509     1.53e-14 Adelie     \n5     5 Adelie  Preproces…        0.791          0.209      4.07e-13 Adelie     \n6     6 Adelie  Preproces…      NaN            NaN        NaN        Adelie     \n```\n:::\n:::\n\n\n#### ROC\n\n\n::: {.cell}\n\n```{.r .cell-code}\npen_assess_base |> \n  group_by(id) |> \n  roc_curve(truth = species, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo) |> \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](tidymod-overview_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}