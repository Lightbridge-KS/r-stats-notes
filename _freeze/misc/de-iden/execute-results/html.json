{
  "hash": "842117938cae12d501a732ff4e2d1bdb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"De-identify\"\n---\n\n\n\n\n\n\n\nTo securely encrypt sensitive data such as a Hospital Number (HN) in R, you can use cryptographic libraries like `openssl` or `sodium`. These libraries provide robust encryption and decryption functions. \n\n## Using `sodium`\n\n### Steps\n\n1. **Generate a Secret Key**: A secret key will be used for encryption and decryption.\n2. **Encrypt the HN**: Convert the Hospital Number into a cipher text (encrypted form).\n3. **Decrypt the HN**: Retrieve the original Hospital Number with the secret key.\n\n### Example\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sodium)\n```\n:::\n\n\n\n\n1. Generate a secret key (must be securely stored and shared)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\nkey <- sodium::keygen()  # Generates a 32-byte random key\nkey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] e9 2d 42 ac c4 2f 16 76 b6 8c 0a e2 82 25 54 72 b7 f5 62 e0 62 0c 12 78 e1\n[26] 8e f6 a9 d6 46 7f 7b\n```\n\n\n:::\n:::\n\n\n\n\nSave the key securely, e.g., in a secure environment variable or encrypted storage\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(key, here(\"data/de-iden/secret_key.rds\"))\n```\n:::\n\n\n\n\n2. Function to encrypt the Hospital Number\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencrypt_hn <- function(hn, key) {\n  \n  hn_raw <- charToRaw(hn) # Convert HN to raw bytes\n  encrypted_hn <- sodium::data_encrypt(hn_raw, key)\n  encrypted_hn\n  \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nencrypt_hn(\"123\", key = key)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 63 e8 30 ca f8 36 15 28 74 63 98 93 3e eb ea f7 f9 ce 99\nattr(,\"nonce\")\n [1] de 33 d4 b4 d8 41 5c b2 75 51 b0 37 fe 25 78 7b e0 79 70 a8 fe 70 d2 ad\n```\n\n\n:::\n:::\n\n\n\n\n\n3. Function to decrypt the Hospital Number (with permission)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndecrypt_hn <- function(encrypted_hn, key) {\n  \n  decrypted_raw <- sodium::data_decrypt(encrypted_hn, key)\n  hn <- rawToChar(decrypted_raw) # Convert decrypted raw bytes back to character string\n  hn\n}\n```\n:::\n\n\n\n\nExample usage:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhn <- \"123456\"                       # Hospital Number\nencrypted_hn <- encrypt_hn(hn, key)     # Encrypt HN\nprint(encrypted_hn)                     # Display encrypted value (not readable)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] f4 ce eb 8b b2 2a 49 7a ad bf 0f fd 9f 8b 42 56 b5 4b 9a a0 4e 5c\nattr(,\"nonce\")\n [1] ff d1 5d c9 c3 0e 00 e2 18 f1 37 32 77 54 b7 3f 5e b9 22 fb 01 08 8e 55\n```\n\n\n:::\n\n```{.r .cell-code}\n# Now decrypt (ensure permission and use of the same key)\ndecrypted_hn <- decrypt_hn(encrypted_hn, key)\nprint(decrypted_hn)                     # Display original HN\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"123456\"\n```\n\n\n:::\n:::\n\n\n\n\n### Key Points:\n\n\n- **Secret Key**: You need to securely store and protect the key (e.g., using an encrypted vault or environment variable). Without the key, the data cannot be decrypted.\n- **Encryption**: The `data_encrypt` function ensures that the data is transformed into an unreadable format (ciphertext).\n- **Decryption**: The `data_decrypt` function reverses the process, recovering the original data, but only with the correct key.\n\n### Security Considerations:\n- **Key Management**: The secret key must be handled carefully, ensuring only authorized users can access it.\n- **Permission Controls**: Implement proper access control for who can decrypt the data, potentially using access logs or two-factor authentication.\n\nThis approach provides secure encryption and decryption for sensitive data such as Hospital Numbers, making it recoverable only by authorized personnel with the correct permissions.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}