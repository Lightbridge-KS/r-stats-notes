{
  "hash": "7d752419f10f52294539bb65d2755abf",
  "result": {
    "markdown": "---\ntitle: \"Multi-class Performance Matrix\"\n---\n\n\n\n\n[Multiclass AVG](https://yardstick.tidymodels.org/articles/multiclass.html)\n\n## Pre-processing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\niris_split <- initial_split(iris, prop = 0.7, strata = Species)\niris_tr <- training(iris_split)\niris_tst <- testing(iris_split)\n```\n:::\n\n\nRecipes\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_rec <- recipe(Species ~ ., data = iris) \n```\n:::\n\n\nModel Spec\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultinom_sim <- multinom_reg(engine = \"nnet\")\n```\n:::\n\n\nWorkflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_wf <- workflow(iris_rec, multinom_sim)\n```\n:::\n\n\n## Fit & Predict\n\nFit Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_fit <- fit(iris_wf, data = iris_tr)\niris_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: multinom_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nCall:\nnnet::multinom(formula = ..y ~ ., data = data, trace = FALSE)\n\nCoefficients:\n           (Intercept) Sepal.Length Sepal.Width Petal.Length Petal.Width\nversicolor    53.35203     3.845927   -31.93694     10.02870   -3.275975\nvirginica    -57.85131   -23.541980   -41.71563     61.61759   31.272313\n\nResidual Deviance: 0.1554973 \nAIC: 20.1555 \n```\n:::\n:::\n\n\nPredict\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_res <- broom::augment(iris_fit, new_data = iris_tst)\nhead(iris_res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 9\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species .pred_class\n         <dbl>       <dbl>        <dbl>       <dbl> <fct>   <fct>      \n1          4.9         3            1.4         0.2 setosa  setosa     \n2          5           3.6          1.4         0.2 setosa  setosa     \n3          5.4         3.7          1.5         0.2 setosa  setosa     \n4          4.8         3            1.4         0.1 setosa  setosa     \n5          5.7         4.4          1.5         0.4 setosa  setosa     \n6          5.4         3.9          1.3         0.4 setosa  setosa     \n# ℹ 3 more variables: .pred_setosa <dbl>, .pred_versicolor <dbl>,\n#   .pred_virginica <dbl>\n```\n:::\n:::\n\n\n## Multi-class Performace Matrix\n\n### Confusion Matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconf_mat(iris_res, truth = Species, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Truth\nPrediction   setosa versicolor virginica\n  setosa         14          0         0\n  versicolor      1         13         0\n  virginica       0          2        15\n```\n:::\n:::\n\n\nCount number of observed class\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_totals <- iris_res |> \n  count(Species, name = \"totals\") %>% \n  mutate(class_wts = totals / sum(totals))\n\nclass_totals\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  Species    totals class_wts\n  <fct>       <int>     <dbl>\n1 setosa         15     0.333\n2 versicolor     15     0.333\n3 virginica      15     0.333\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncell_counts <- \n  iris_res %>% \n  group_by(Species, .pred_class) %>% \n  count() %>% \n  ungroup()\n\ncell_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  Species    .pred_class     n\n  <fct>      <fct>       <int>\n1 setosa     setosa         14\n2 setosa     versicolor      1\n3 versicolor versicolor     13\n4 versicolor virginica       2\n5 virginica  virginica      15\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the four sensitivities using 1-vs-all\none_versus_all <- \n  cell_counts %>% \n  filter(Species == .pred_class) %>% \n  full_join(class_totals, by = \"Species\") %>% \n  mutate(sens = n / totals)\n\none_versus_all\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 6\n  Species    .pred_class     n totals class_wts  sens\n  <fct>      <fct>       <int>  <int>     <dbl> <dbl>\n1 setosa     setosa         14     15     0.333 0.933\n2 versicolor versicolor     13     15     0.333 0.867\n3 virginica  virginica      15     15     0.333 1    \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Three different estimates:\none_versus_all %>% \n  summarize(\n    macro = mean(sens), \n    macro_wts = weighted.mean(sens, class_wts),\n    micro = sum(n) / sum(totals)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  macro macro_wts micro\n  <dbl>     <dbl> <dbl>\n1 0.933     0.933 0.933\n```\n:::\n:::\n\n\n-   **Macro-averaging:** computes a set of one-versus-all metrics using the standard two-class statistics. These are averaged.\n-   **Macro-weighted averaging:** does the same but the average is weighted by the number of samples in each class.\n-   **Micro-averaging:** computes the contribution for each class, aggregates them, then computes a single metric from the aggregates.\n\n\n![Multiclass Doodles](/pic/multiclass-doodle.jpg){fig-align=\"center\"}\n",
    "supporting": [
      "perf-mat_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}