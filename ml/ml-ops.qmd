---
title: "ML Ops with Penguin"
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
here::i_am("ml/ml-ops.qmd")
```

```{r load-pkg, message=FALSE, warning=FALSE}
library(here)
library(tidyverse)
library(tidymodels)

tidymodels_prefer()
```

Thanks [james-h-wade](https://www.youtube.com/@james-h-wade) for simplify the whole process. The original material can be found at:

- [YouTube: Hyperparameter Tuning](https://youtu.be/IzjmuGJgwKQ?si=9VA-Etz0p0bonR1D)
- [Slide](https://jameshwade.quarto.pub/hyperparameters-tuning-with-tidymodels)
- [GitHub: R-ML Ops](https://github.com/JamesHWade/r-mlops)

## EDA


```{r}
penguins |>
  filter(!is.na(sex)) |>
  ggplot(aes(x     = flipper_length_mm,
             y     = bill_length_mm,
             color = sex,
             size  = body_mass_g)) +
  geom_point(alpha = 0.5) +
  facet_wrap(~species)
```


## Split

```{r}
# remove rows with missing sex, exclude year and island
penguins_df <-
  palmerpenguins::penguins |>
  drop_na(sex) |>
  select(-year, -island)

# set the seed for reproducibility
set.seed(1234)

# Split the data into train and test sets stratified by sex
penguin_split <- initial_split(penguins_df, strata = sex)
penguin_train <- training(penguin_split)
penguin_test  <- testing(penguin_split)

# create folds for cross validation
penguin_folds <- vfold_cv(penguin_train)
```

## Recipes

```{r}
penguin_rec <-
  recipe(sex ~ ., data = penguin_train) |>     
  step_YeoJohnson(all_numeric_predictors()) |> 
  step_dummy(species) |>                       
  step_normalize(all_numeric_predictors())     
```

## Model Spec

```{r}
# Logistic Regression
glm_spec <-
  logistic_reg(penalty = 1) |>
  set_engine("glm")

# Random Forest
tree_spec <-
  rand_forest(min_n = tune()) |>
  set_engine("ranger") |>
  set_mode("classification")

# Neural Network with `{torch}` (Not Done)
```

## Fit Models & Tune Hyperparameters


Use Bayes optimizaiton for hyperparameter tuning

```{r}
bayes_control <- control_bayes(no_improve = 10L,
                               time_limit = 20,
                               save_pred  = TRUE,
                               verbose    = TRUE)
```

```{r}
# Unix and macOS only
library(doMC)
registerDoMC(cores = 8)
```

```{r cache=TRUE, cache.lazy=TRUE}
workflow_set <-
  workflow_set(
    preproc = list(penguin_rec),
    models  = list(glm   = glm_spec,
                   tree  = tree_spec)
  ) |>
  workflow_map("tune_bayes",
               iter      = 50L,
               resamples = penguin_folds,
               control   = bayes_control
  )

class(workflow_set)
workflow_set
```

## Compare Model Results

### Tabular view

```{r}
# create table of best models defined using roc_auc metric
rank_results(workflow_set,
             rank_metric = "roc_auc",
             select_best = TRUE)
```
### Plotting performance

```{r}
autoplot(workflow_set)
```



## Finalize

### Select best model

```{r}
best_model_id <- "recipe_glm"

best_fit <-
  workflow_set |>
  extract_workflow_set_result(best_model_id) |>
  select_best(metric = "accuracy")

best_fit
```

### Final Fit

```{r}
# create workflow for best model
final_workflow <-
  workflow_set |>
  extract_workflow(best_model_id) |>
  finalize_workflow(best_fit)

# fit final model with all data
final_fit <-
  final_workflow |>
  last_fit(penguin_split)
```


### Final Metric

```{r}
# show model performance
collect_metrics(final_fit)
```

```{r}
collect_predictions(final_fit) |>
  roc_curve(sex, .pred_female) |> 
  autoplot()
```
